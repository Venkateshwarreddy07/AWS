Databases are the systems which store and manage the data. A relational database system is a type of database management system (DBMS) that organizes data into tables with rows and columns, and establishes relationships between these tables based on common attributes. Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale relational databases in the cloud.These are broadly split into relational and non relational databases systems. Relational database systems refers to relational database platforms here the data is stored in very structured form.  This structure is known as schema and this is fixed and rigid. This defines the names of things and values of things which needs to be stored and where need to be stored.  The relationship between the tables is fixed before entering the data and cannot be changed. Amazon DynamoDB is a fully managed NoSQL database service that offers fast and flexible document and key-value storage with seamless scalability and low latency. DynamoDB is ideal for applications that require fast and flexible NoSQL database capabilities, while RDS is suitable for applications that require the traditional relational database model and SQL querying.

DATA SOURCE TYPES : 

STRUCTURED DATA : 

Structured data is stored as a series of data values in a relatable tables managed by a database engine. This is highly organized, easy to analyze, and able to be used in highly complexed queries.

REAL TIME EXAMPLE : The real time example for structured data is CRM ( customer relationship management), IN CRM customer details, sales order, transactional details and support tickets  in these cases  the data needs to be in a organized and associated way so that the data of the customer can be stored according to their details in tables with a relational database. Each table represents a specific entity (e.g., customers, orders, products) with well-defined relationships between them.  This structured data can be easily queried, analyzed, and used to generate reports.

UNSTRUCTURED DATA : 

This is stored in file store or object store such as S3 buckets this lacks the predefined structure and need to have special tools to query the data. 

REAL TIME EXAMPLE : 

Social media platforms like Facebook, instagram, twitter use unstructured data in form of posts or comments or likes here then data do not have any predefined structure and are stored in file store or object store such as Amazon S3. Special tools such as trend analysis, model detection are used to analyze the unstructured data.

SEMI STRUCTURED DATA :

Semistructured data is stored in JSON files that are loaded into a database engine. This data is highly flexible because the structure is not strict and can be changed as needed within the table. Semistructured data can be analyzed but not with the same level of complexity that analytics on structured data can achieve.

REAL TIME EXAMPLE :

In IOT applications the data generated by different sensors such as temperature, humidity, gps etc are stored in semi structured format. where each sensor produce data in different formats and these are stored into databases.

RELATIONAL DATABASE SYSTEMS : 

These used to store the data in rows,  columns and tables and relate in between these tables so that the data can be accessed easily. In database transactions there are two ways of organizing information. 1) )online transaction processing 2) online analytical processing.

OLTP :  

Online transaction process this focuses on insertion, deletion, updating of data transactions. These are very simple and short and require very less time and space to process.
Best example for this is bank transaction or any e-commerce website where you will add the orders to cart, place the order and do frequent changes and this changes are updated in the database. Here changes are made very frequently hence an OLTP.

OLAP :

This  database store the historical data from OLTP and use it to analyze and extract information for good decision making. The best example for this is a vast sales data which is used to compare the sales between two products or growth or downfall of a products sale or as such.

AMAZON RDS :

Amazon RDS was designed to help you reduce the infrastructure costs associated with running and managing databases, improve the time it takes to develop applications, and create value using analytics and machine learning services. Amazon RDS is a relational database service. Relational databases use schemas to normalize data. They reduce their storage costs with these schemas.  Amazon RDS provides enhanced availability and durability through the use of Multi-AZ deployments. This means that Amazon RDS creates multiple instances of the databases in different Availability Zones. In the case of an infrastructure failure, Amazon RDS performs an automatic failover to the standby in another Availability Zone. Database operations resume as soon as the failover is complete.

When you build your first Amazon RDS database, you have to make a few key decisions. First is the database instance type, which determines the resources your database will have. Next is the type of database engine you want to run. You can choose from Amazon Aurora, PostgreSQL, MySQL, MariaDB, Oracle Database, or SQL Server. Each database engine has its own unique characteristics and features.Amazon RDS stores data in the form of tables, records, and fields. Now in most tables, records must be unique. You can do this by creating a numeric field containing unique values. This is called a primary key. Primary key values from one table can be added to other tables. This creates a relationship. Relationships are one of the distinguishing benefits of relational databases.

The basic building block of Amazon RDS is the database instance class. When you create a database instance, you choose a database engine to run—like PostgreSQL or Amazon Aurora. The database engine manages and runs all of the database operations. Another important consideration is the instance class. This determines how much memory, CPU, and I/O capabilities, in terms of network and storage throughput, will be available to the database engine. 

Amazon RDS can be secured by ,

minimizing the access to the database by placing it in the VPC and sometimes you need to accept the requests directly from the internet so in this you can create a internet gateway.

Second, controlling access to the database instance. Security groups are used to control access to a database instance.

Securing communications to and from the database instance. This is known as data in transit. This is accomplished by using HTTPS connections.

These connections are encrypted using Secure Sockets Layer, or SSL. protecting data in the database. This is known as data at rest. Amazon RDS uses the industry-standard AES-256 bit encryption algorithm to encrypt the data while at rest.



AMAZON AURORA :

 Aurora is structured in the same way other relational database engines are. It stores data in the form of tables, records, and fields. Aurora automatically maintains six copies of your data across three Availability Zones and will automatically attempt to recover the database in a healthy Availability Zone with no data loss. You can create up to 15 read replicas that can serve read-only traffic as well as failover. Let’s discuss a few of Aurora’s benefits. Aurora is a fully managed system by Amazon RDS. You no longer need to worry about database management tasks such as hardware provisioning, software patching, setup, configuration, or backups. Aurora automatically backs up your database to Amazon S3, enabling granular point-in-time recovery. Aurora is built for high performance and scalability. You can get five times the throughput of standard MySQL and three times the throughput of standard PostgreSQL databases with Amazon Aurora. This performance is on par with commercial databases, at a tenth of the cost. Aurora provides multiple levels of security for your database, including isolation, encryption at rest, and encryption in transit. Amazon Aurora Serverless is an on-demand, auto scaling configuration for the MySQL-compatible edition of Aurora. It was designed to enable databases to run in the cloud without managing individual database instances.

NON- RELATIONAL DATABASES :

Semistructured and unstructured data are often stored in non-relational database systems, sometimes called NoSQL databases. It is important to remember that SQL is a way of querying data. It implies precise structure. Non-relational or NoSQL does not mean the data stored cannot be queried using SQL. A better way to think of the term "NoSQL" is "not only SQL."

AMAZON ELASTIC CACHE :
One can use amazon elastic cache to improve the performance of the application by retrieving data from high throughput and low latency in-memory data stores. If an application is running slow and need to improve its performance then you can use amazon elastic cache and this is a popular choice for gaming, advertising technology (ad tech), financial service, healthcare, and Internet of Things (IoT) apps.
AMAZON DYNAMIC DB :
Amazon DynamoDB can handle more than 10 trillion requests per day and support peaks of more than 20 million requests per second. More than 100,000 AWS customers have chosen DynamoDB as their key-value database for mobile, web, gaming, ad tech, IoT, and other applications that need low-latency data access at any scale. DynamoDB supports ACID-compliant transactions.

AMAZON NEPTUNE :
Amazon Neptune is a fast, reliable, fully managed graph database service that makes it easy to build and run applications that work with highly connected data sets used to discover potential fraudulent behavior before it happens. This starts with finding interactions between products, locations, and devices and then mapping those data points to individual users, customers, and/or employees.
Neptune graph use cases include recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.

AMAZON DOCUMENT DB :
Amazon DocumentDB is a fast, reliable, and fully managed database service that allows you to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
Amazon DocumentDB is used for storing semistructured data as a document, rather than normalizing data across multiple tables, each with a unique and fixed structure, as in a relational database. Documents stored in a document database use nested key-value pairs to provide the document's schema.DynamoDB supports some of the world’s largest scale applications by providing consistent, single-digit millisecond response times at any scale. You can build applications that grow as needed with virtually unlimited throughput and storage.
With DynamoDB, there are no servers to provision, patch, or manage, and there's no software to install, maintain, or operate. DynamoDB automatically scales up and down to adjust for the capacity and maintain performance of your systems. Availability and fault tolerance are built in, eliminating the need to architect your applications for these capabilities. The service stores data in the form of tables, items, and attributes. When you create a table, you define a partition key attribute to uniquely identify each item in that table. This way, no two items can have the same key. You can also assign other attributes, like a sort key attribute.
DynamoDB makes a suitable platform for many different use cases, including providing game companies with scalability and millisecond response times. d All games can take advantage of DynamoDB, whether they’re played on mobile devices, a console, or the desktop. They can store game state, user profiles, and a user’s inventory as well as purchases

